# -*- coding: utf-8 -*-
"""TicTacToe

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V_SB5z7KBRodLTa31MCpO7jFxaNX5IH8
"""

#Take board as a list and use index positions to print out test values
from IPython.display import clear_output
import random

def display_board(board):
  clear_output()
  print(board[1] + ' | ' + board[2] + ' | ' + board[3])
  print('--|---|--')
  print(board[4] + ' | ' + board[5] + ' | ' + board[6])
  print('--|---|--')
  print(board[7] + ' | ' + board[8] + ' | ' + board[9])

test_board = ['#','X','O','X','O','X','O','X','O','X']
display_board(test_board)

#function that takes in a player's input
def player_input():
  marker = ''
  while marker != 'X' and marker != 'O':
    marker = input('Player 1, choose X or O: ').upper()

  if marker == 'X':
    return ('X', 'O')
  else:
    return ('O', 'X')


player1_marker , player2_marker = player_input()

#assign position to index position on board
def place_marker(board, marker, position):
  board[position] = marker

place_marker(test_board,'T',2)
display_board(test_board)

def win_check(board, mark):
  #Check rows 
  return((board[1] == mark and board[2] == mark and board[3] == mark) or
  (board[4] == mark and board[5] == mark and board[6] == mark) or
  (board[7] == mark and board[8] == mark and board[9] == mark) or
  #Check columns
  (board[1] == mark and board[4] == mark and board[7] == mark) or
  (board[2] == mark and board[5] == mark and board[8] == mark) or
  (board[3] == mark and board[6] == mark and board[9] == mark) or
  #Check diagonals
  (board[1] == mark and board[5] == mark and board[9] == mark) or
  (board[3] == mark and board[5] == mark and board[7] == mark))

def choose_first():
  flip = random.randint(0,1)
  if flip == 0:
    return 'Player 1'
  else:
    return 'Player 2'

#check if space on board is free
def free_space(board, position):
  return(board[position]==' ')

def full_board_check(board):
  for x in range(1,10):
    if free_space(board,x):
      return False
  #Board is full if true
  return True

def player_choice(board):
  position = 0
  while position not in [1,2,3,4,5,6,7,8,9] or not free_space(board,position):
    position = int(input('Choose a position from 1-9 '))
  return position

def replay():
  choice = input('Would you like to play again? Enter Yes or No ')

  return choice == 'Y'

print('Welcome to Tic Tac Toe~')

while True:

  the_board = [' ']*10
  player1_marker, player2_marker = player_input()
  
  turn = choose_first()
  print(turn + ' will go first')


  play_game = input('Are you ready to play? Yes or no? ')

  if play_game == 'Yes':
    game_start = True
  else:
    game_start = False

  while game_start:
    if turn == 'Player 1':
      #show board
      display_board(the_board)   
      #choose position
      position = player_choice(the_board)
      #place marker on position
      place_marker(the_board, player1_marker, position)
      
      #check if player won
      if win_check(the_board, player1_marker):
        display_board(the_board)
        print('Player 1 has won!')
        game_start = False
      
      #check if there is a tie
      else:
        if full_board_check(the_board):
          display_board(the_board)
          print('The game is a tie~')
          game_start = False
        else:
          turn = 'Player 2'
    else:
      #show board
      display_board(the_board)   
      #choose position
      position = player_choice(the_board)   
      #place marker on position
      place_marker(the_board, player2_marker, position)
      
      #check if player won
      if win_check(the_board, player2_marker):
        display_board(the_board)
        print('Player 2 has won!')
        game_start = False
      #check if there is a tie
      else:
        if full_board_check(the_board):
          display_board(the_board)
          print('The game is a tie~')
          game_start = False
        else:
          turn = 'Player 1'

  if not replay():
    break